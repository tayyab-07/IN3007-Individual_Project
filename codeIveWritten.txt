
//// IN PLAYERMOVEMENT.CS ////
// different states changing move speed of player
        if (grounded)
        {
            state = MovementState.walking;
            moveSpeed = walkSpeed;
        }

        if (grounded && Input.GetKey(crouchKey))
        {
            state = MovementState.crouching;
            moveSpeed = crouchSpeed;
        }

        if (grounded && Input.GetKey(SprintKey))
        {
            state = MovementState.sprinting;
            moveSpeed = sprintSpeed;
        }

        if (!grounded)
        {
            state = MovementState.air;
        }


//// IN GUARD.CS ///
//// ONLY INCLUDED SPECIFIC LINE I WROTE SO SOME LINES AND FUNCTIONS ARE CUT OFF SUDDENLY ////

public class Guard : MonoBehaviour
{
    float angleA;
    float angleB;
    float angleC;

    float zone1Timer;
    float zone2Timer;
    float zone3Timer;
    float zone4Timer;
    float zone5Timer;

    float farViewingDist;
    float mediumViewingDist;
    float nearViewingDist;

    //made public to check timer during run time

    Color spottedColour;

    // enum state to store different detection zones
    public ZoneState zone;
    public enum ZoneState
    { 
        emptyZone,
        zone1,
        zone2, 
        zone3,
        zone4,
        zone5
    }

    // Start is called before the first frame update
    void Start()
    {
        // define angles timers and distances for zones
        angleA = 60;
        angleB = 90;
        angleC = 120;

        zone1Timer = 1.0f;
        zone2Timer = 1.5f;
        zone3Timer = 2.0f;
        zone4Timer = 3.0f;
        zone5Timer = 5.0f;

        farViewingDist = 40.0f;
        mediumViewingDist = 25.0f;
        nearViewingDist = 15.0f;
    }

    // Update is called once per frame
    void Update()
    {
        StateHandler();


        // conditional statements set colour after set amount of time based on zone
        if (zone == ZoneState.zone1)
        {
            if (playerVisibleTimer >= zone1Timer)
            {
                spottedColour = Color.red;
            }
        }

        else if (zone == ZoneState.zone2)
        {
            if (playerVisibleTimer >= zone2Timer)
            {
                spottedColour = Color.magenta;
            }
        }

        else if (zone == ZoneState.zone3)
        {
            if (playerVisibleTimer >= zone3Timer)
            {
                spottedColour = Color.yellow;
            }
        }

        else if (zone == ZoneState.zone4)
        {
            if (playerVisibleTimer >= zone4Timer)
            {
                spottedColour = Color.green;
            }
        }

        else if (zone == ZoneState.zone5)
        {
            if (playerVisibleTimer >= zone5Timer)
            {
                spottedColour = Color.blue;
            }
        }

        else if (zone == ZoneState.emptyZone)
        {
            spottedColour = initialSpotlightColour;
        }

        // timer doesnt exceed 0 or zone 5 timer
        spotlight.color = spottedColour;
    }

    public void StateHandler()
    {
        Vector3 distToPlayer;
        float playerGuardAngle;

        // conditional statements to find out what zone a player is in
        // always set to empty zone if any condition isnt met
        {
            if (playerGuardAngle < angleA / 2f)
            {
                {
                    zone = ZoneState.zone1;
                }
                else
                {
                    zone = ZoneState.emptyZone;
                }
            }

            else if (playerGuardAngle < angleC / 2f)
            {
                {
                    zone = ZoneState.zone2;
                }
                else
                {
                    zone = ZoneState.emptyZone;
                }
            }

            else
            {
                zone = ZoneState.emptyZone;
            }
        }

        {
            if (playerGuardAngle < angleA / 2f)
            {
                {
                    zone = ZoneState.zone2;
                }
                else
                {
                    zone = ZoneState.emptyZone;
                }
            }

            else if (playerGuardAngle < angleB / 2f)
            {
                {
                    zone = ZoneState.zone3;
                }
                else
                {
                    zone = ZoneState.emptyZone;
                }
            }

            else if (playerGuardAngle < angleC / 2f)
            {
                {
                    zone = ZoneState.zone4;
                }
                else
                {
                    zone = ZoneState.emptyZone;
                }
            }

            else
            {
                zone = ZoneState.emptyZone;
            }
        }
        {
            if (playerGuardAngle < angleA / 2f)
            {
                {
                    zone = ZoneState.zone3;
                }
                else
                {
                    zone = ZoneState.emptyZone;
                }
            }

            else if (playerGuardAngle < angleB / 2f)
            {
                {
                    zone = ZoneState.zone4;
                }
                else
                {
                    zone = ZoneState.emptyZone;
                }
            }

            else if (playerGuardAngle < angleC / 2f)
            {
                {
                    zone = ZoneState.zone5;
                }
                else
                {
                    zone = ZoneState.emptyZone;
                }   
            }
            else
            {
                zone = ZoneState.emptyZone;
            }
        }

        else 
        {
            zone = ZoneState.emptyZone;
        }
    }

    // draws gizmo to help visulise distance in scene view
    {
    }

}